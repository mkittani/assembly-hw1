comment !
#############################
this code was written and tested on VS code using the masm extension
#############################
!

.model small
.data
x1 db ?
x2 db ?
msg0 db 0ah,0dh,"Enter two numbers in hex format ONLY(00-FF).$"
msg1 db 0ah,0dh,"First number: $"
msg2 db 0ah,0dh,"Second number: $"
msg3 db 0ah,0dh,"Invalid input! $"
msg5 db 0ah,0dh,"Enter an operation you wish to perform on the entered numbers: $"
msg6 db 0ah,0dh,"Invalid operation! $"
newline db 0ah,0dh,'&'

print macro var
    push ax
    push dx
    push si
    lea si,var
    mov dx,si
    mov ah,09h
    int 21h
    pop si
    pop dx
    pop ax
endm

.code
hexCheck proc near
    mov ax,0
    mov dx,0     
    l1:
        mov ah,1
        int 21h

        cmp al,39h
        ja a0

        sub al,30h 
        jmp endMacro
    a0:  
        cmp al,'A' 
        jne b0
        mov al,0ah
        jmp endMacro
    b0:
        cmp al,'B'
        jne c0
        mov al,0bh
        jmp endMacro
    c0:
        cmp al,'C'
        jne d0
        mov al,0ch
        jmp endMacro
    d0:
        cmp al,'D'
        jne e0
        mov al,0dh 
        jmp endMacro
    e0:
        cmp al,'E'
        jne f0
        mov al,0eh
        jmp endMacro
    f0:
        cmp al,'F'
        jne a0
        mov al,0fh
        jmp endMacro
    a1:
        cmp al,'a' 
        jne b1
        mov al,0ah
        jmp endMacro
    b1:
        cmp al,'b'
        jne c1
        mov al,0bh
        jmp endMacro
    c1:
        cmp al,'c'
        jne d1
        mov al,0ch
        jmp endMacro
    d1:
        cmp al,'d'
        jne e1
        mov al,0dh 
        jmp endMacro
    e1:
        cmp al,'e'
        jne f1
        mov al,0eh
        jmp endMacro
    f1:
        cmp al,'f'
        jne notHex
        mov al,0fh
        jmp endMacro
    notHex:  
        print msg6
        mov ax,'x'
        ret
    endMacro:
        ret
hexCheck endp

printHexFormat proc near
	cmp bh,0a0h
	je A
	cmp bh,0b0h
	je B
	cmp bh,0c0h
	je C
	cmp bh,0d0h
	je D
	cmp bh,0e0h
	je E
	cmp bh,0f0h
	je F
	shr bh,4
	add bh,30h
	mov dl,bh
	mov ah,6
	int 21h
	jmp endMethod
    A:
        mov dl,'A'
        mov ah,6
        int 21h
        jmp endMethod
    B:
        mov dl,'B'
        mov ah,6
        int 21h 
        jmp endMethod
    C:
        mov dl,'C'
        mov ah,6
        int 21h
        jmp endMethod
    D:
        mov dl,'D'
        mov ah,6
        int 21h
        jmp endMethod
    E:
        mov dl,'E'
        mov ah,6
        int 21h
        jmp endMethod
    F:
        mov dl,'F'
        mov ah,6
        int 21h
    endMethod:
	    ret
printHexFormat endp 


printDecimalFormat proc near     
    push ax
    push bx
    push cx
    push dx
    xor bh,bh
    threeDigits:
        cmp bl,100    
        jb twoDigits
        mov ax,bx 
        mov cx,100
        div cl     
        add al,48
        mov dl,al
        mov al,6
        int 21h
        jmp digit2
    twoDigits:
        cmp bl,10         
        jb oneDigitOnly
        jmp digit3
    digit2:
        sub dl,48
        mov al,100          ;adding the second digit to the answer and mult by 100 to add the zeroes
        mul dl
        sub bx,ax
    digit3:        
        mov cx,10
        mov ax,bx
        div cl 
        add al,48           ;adding the third digit to the answer and mult by 100 to add the zeroes
        mov dl,al
        mov ah,6
        int 21h
    oneDigit: 
        sub dl,48
        mov al,10
        mul dl
        sub bx,ax
    oneDigitOnly:
        add bl,48 
        mov dl,bl
        mov ah,6
        int 21h
        
        pop dx
        pop cx
        pop bx
        pop ax
        ret
endp printDecimalFormat

main:
    mov ax,@data    ;pointing ax on the address of data
    mov ds,ax    
    lea si,x1
    lea di,x2   
    print msg0
    integers:
        print msg1
        xor bx, bx          ;clear bx register
        call hexCheck       ;scanf digit1 x1
        mov bh,al
        call hexCheck       ;scanf digit2 x1
        mov bl,al
        mov [x1],bl       ;x1=bl(which is the values we read)

        cmp ax,'x'          ;if the entered integers==x then the user entered a value out of range
        je integers

        print msg2
        xor bx, bx
        call hexCheck       ;scanf digit1 x2
        add bh,al
        call hexCheck       ;scanf digit2 x2
        mov bl,al
        mov [x2],bl       ;x2=bl(which is the values we read)
        cmp ax,'x'          ;if the entered integers==x then the user entered a value out of range
        je integers
    operation:
        print msg5
        mov bl, [x1]
        mov cl, [x2]
        xor ax,ax
        mov ah,1 
        int 21h             ;scanf operation and testing if statements
        print newline
        cmp al,'&'
        je anding
        cmp al,'-'
        je subtraction
        cmp al,'i'
        je increment
        cmp al, '+'
        je addition
        print msg6
    anding:
        and bl,cl
        jmp farLabel
    subtraction:
        sub bl,cl     ;<--------------check       ;subtracting bl which has the value of x1 to di which points at x2  
        jmp farLabel
    increment:
        inc byte ptr [si]
        inc byte ptr [di]     ;<-----------------check
        mov bh,[si]
        and bh,0f0h             ;anding F w/the input so that we can know exactly what it is since 1 and 0=0, 1 and 1=1
        call printHexFormat     ;print the first digit num1
        mov bh,[si]
        shl bh,4 
        and bh,0f0h
        call printHexFormat     ;print the second digit num1
        print newline
        mov bh,[di]
        and bh,0f0h
        call printHexFormat     ;print the first digit num2
        mov bh,[di]
        shl bh,4
        and bh,0f0h
        call printHexFormat      ;print the second digit num2
        print newline
        call printDecimalFormat
        jmp flags
        
    addition:
        add bl,cl      ;adding bl which has the value of x1 to di which points at x2
        jmp farLabel
    farLabel:
        mov bh,bl
        and bh,0f0h             ;anding F w/the input so that we can know exactly what it is since 1 and 0=0, 1 and 1=1
        call printHexFormat
        mov bh,bl
	    shl bh,4
	    and bh,0f0h
	    call printHexFormat
        print newline
        call printDecimalFormat

    flags:
        print newline
        mov dl,'C'
        int 21h
        mov dl,'='
        int 21h
        jc carry1          ;jump to if the carry flag in the reg is one
        mov dl,'0'
        int 21h
        parity0:
            mov dl,','
            int 21h
            mov dl,'P'
            int 21h
            mov dl,'='
            int 21h
            jp parity1          ;jump to if the parity flag in the reg is one
            mov dl,'0'
            int 21h
        overflow0:
            mov dl,','
            int 21h
            mov dl,'O'
            int 21h
            mov dl,'='
            int 21h
            jo overflow1          ;jump to if the overflow flag in the reg is one
            mov dl,'0'
            int 21h
        sign0:
            mov dl,','
            int 21h
            mov dl,'S'
            int 21h
            mov dl,'='
            int 21h
            js sign1          ;jump to if the sign flag in the reg is one
            mov dl,'0'
            int 21h
        zero0:
            mov dl,','
            int 21h
            mov dl,'Z'
            int 21h
            mov dl,'='
            int 21h
            jz zero1          ;jump to if the zero flag in the reg is one
            mov dl,'0'
            int 21h
        aux0:
            mov dl,','
            int 21h
            mov dl,'A'
            int 21h
            mov dl,'='
            int 21h
            jmp aux1



        carry1:
            mov dl,'1'
            int 21h
            jmp parity0
        parity1:
            mov dl,'1'
            int 21h
            jmp overflow0
        overflow1:
            mov dl,'1'
            int 21h
            jmp sign0
        sign1:
            mov dl,'1'
            int 21h
            jmp zero0
        zero1: 
            mov dl,'1'
            int 21h
            jmp aux0
        aux1:
            and cx,00001000             ;anding with the 4th bit to so that we could know if there is a carry or not b/w 3rd and 4th
            jz lja2
            mov dl,'1'
            int 21h 
            jmp exitFlags
        lja2:
            mov dl,'0'
            int 21h
        exitFlags:
            jmp integers
exit:
end main